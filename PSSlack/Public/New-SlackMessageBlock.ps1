#Borrowed from https://github.com/jgigler/Powershell.Slack - thanks @jgigler et al!
function New-SlackMessageBlock
{
    <#
    .SYNOPSIS
        Creates a rich notification (Block) to use in a Slack message.

    .DESCRIPTION
        Creates a rich notification (Block) to use in a Slack message.

        Used to create Block message payloads for Slack.
        Blocks are a series of components that can be combined to create
            visually rich and compellingly interactive messages.

    .PARAMETER Type
        The type of block. See Validate Set to get allowed values (doc here : https://api.slack.com/reference/block-kit/blocks )

    .PARAMETER BlockId
        A string acting as a unique identifier for a block.
        If not specified, a block_id will be generated (API side).
        You can use this block_id when you receive an interaction payload to identify the source of the action. 

    .PARAMETER ExistingBlock
        One or more block to add this block to.

        Allows you to chain calls to this function:
            New-SlackMessageBlock ... | New-SlackMessageBlock ... 

    .PARAMETER Elements
        An array of interactive element objects, generated by New-SlackMessageBlockElement
        This parameters exists when Type is 'actions' or 'context'
        Maximum number of items is 10

    .PARAMETER Text
        The text for the block. 
        This parameters exists when Type is 'header' or 'section'
        Maximum length for the text in this field is 3000 characters

    .PARAMETER Accessory
        One of the available element objects (generated by New-SlackMessageBlockElement)
        This parameters exists when Type is 'section'

    .PARAMETER Fields
        An array of string (which are converted to text object with 'mrkdwn' type)
        Any text objects included with fields will be rendered in a compact format that allows for 2 columns of side-by-side text.
        This parameters exists when Type is 'section'
        Maximum number of items is 10 (server side)

    .PARAMETER ImageUrl
        The URL of the image to be displayed. Maximum length for this field is 3000 characters.
        This parameters exists when Type is 'image'

    .PARAMETER Title
        An optional title for the image
        This parameters exists when Type is 'image'

    .PARAMETER AltText
        A plain-text summary of the image. This should not contain any markup. Maximum length for this field is 2000 characters.
        This parameters exists when Type is 'image'

    .EXAMPLE
        # This is a simple example illustrating some common options
        # when constructing a message block
        # giving you a richer message
        $Token = 'A token. maybe from https://api.slack.com/docs/oauth-test-tokens'
        
        $elements_of = New-SlackMessageBlockElement -Type overflow -ActionId "ofId" -Options @{ yes = "Oh Yeah" ; no = "Oh gosh no!" }
        $blocks = New-SlackMessageBlock -Type section -Fields ("*bold*","_underligned_") -Text "Some text before overflow" -Accessory $elements_of

        New-SlackMessage -Channel '@wframe' `
                         -IconEmoji :bomb:`
                         -Blocks $blocks | Send-SlackMessage -Token $Token

        # Create a message block
        # Attach this to a slack message sending to the @wframe channel
        # Send the newly created message using a token

    .LINK
        https://api.slack.com/reference/block-kit/blocks

    .LINK
        https://api.slack.com/methods/chat.postMessage
    #>
    [CmdletBinding()]
    [OutputType([System.Collections.Hashtable])]
    Param
    (
        [Parameter(ValueFromPipeline = $True)]
        [PSTypeName('PSSlack.MessageBlock')]
        [object[]]
        $ExistingBlock,
        
        [validateset('actions','context','divider','file','header','image','section')] # Since 'Input' type is only for modals and not message, it's not allowed here
        [string]$Type,
        
        [string]$BlockId

    )

    dynamicparam {
        $params = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
        switch($Type) {
            "image"  {
                New-DynamicParam -Name ImageUrl -Type string -Mandatory -DPDictionary $params -Position 1
                New-DynamicParam -Name AltText -Type string -Mandatory -DPDictionary $params -Position 2
                New-DynamicParam -Name Title -Type string -DPDictionary $params -Position 3
            }
            "context"  {
                New-DynamicParam -Name Elements -Type System.Collections.Hashtable[] -Mandatory -DPDictionary $params
            }
            "actions"  {
                New-DynamicParam -Name Elements -Type System.Collections.Hashtable[] -Mandatory -DPDictionary $params
            }
            "header"  {
                New-DynamicParam -Name Text -Type string -DPDictionary $params
            }
            "section"  {
                New-DynamicParam -Name Fields -Type string[] -DPDictionary $params
                New-DynamicParam -Name Accessory -Type System.Collections.Hashtable -DPDictionary $params
                New-DynamicParam -Name Text -Type string -DPDictionary $params
            }
        }
        return $params
    }

    Begin
    {
        $Block = @{}
        switch($PSBoundParameters.Keys)
        {
            'Elements' { $Block.elements = $PSBoundParameters["Elements"] } #Elements are defined by the user as an Array of HashTables.
            'Accessory' { $Block.accessory = $PSBoundParameters["Accessory"] }
            'Type' { $Block.type = $Type}
            'BlockId' { $Block.block_id = $BlockId }
            'AltText' { $Block.alt_text = $PSBoundParameters["AltText"] }
            'Text' { $Block.text = @{ type = "plain_text" ; text = $PSBoundParameters["Text"] } }
            'Title' { $Block.title = @{ type = "plain_text" ; text = $PSBoundParameters["Title"] } }
            'Fields' {
                $Fields = $PSBoundParameters["Fields"]
                $LstFields = @()
                $Fields | ForEach-Object {
                    $LstFields += @{ type = "mrkdwn" ; text = $_ }
                }
                $Block.fields = $LstFields
            }
        }

        if($Block.elements -and $Block.elements.Count -gt 10){
            throw "Max Element Count for a block is 10"
        }

        Add-ObjectDetail -InputObject $Block -TypeName 'PSSlack.MessageBlock' -Passthru $False
        $ReturnObject = @()
    }
    Process
    {
        foreach($a in $ExistingBlock)
        {
            $ReturnObject += $a
        }
        
        If($ExistingBlock)
        {
            Write-Verbose "Existing Block: $($ExistingBlock | Convertto-Json -compress)"
        }
    }
    End {
        $ReturnObject += $Block
        $ReturnObject
    }
}